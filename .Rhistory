#----------------------------------------------------------------------------------#
#Count rows with "na" values
colSums(is.na(all_trips))
#----------------------------------------------------------------------------------#
#Remove missing
clean_trip_final <- all_trips[complete.cases(all_trips), ]
#----------------------------------------------------------------------------------#
#Remove duplicates
clean_trip_final <- distinct(clean_trip_final)
#----------------------------------------------------------------------------------#
#Remove na
clean_trip_final <- drop_na(clean_trip_final)
clean_trip_final <- remove_missing(clean_trip_final)
#----------------------------------------------------------------------------------#
#Remove data with greater start_at than end_at
clean_trip_final<- clean_trip_final %>%
filter(started_at < ended_at)
#----------------------------------------------------------------------------------#
table(clean_trip_final$member_casual)
# Reassign to the desired values (we will go with the current 2020 labels)
clean_trip_final <- clean_trip_final %>%
mutate(member_casual = recode(member_casual
,"Subscriber" = "member"
,"Customer" = "casual"))
#----------------------------------------------------------------------------------#
table(clean_trip_final$member_casual)
#----------------------------------------------------------------------------------#
#Separate date in date, day, month, year for better analysis
clean_trip_final$date <- as.Date(clean_trip_final$started_at)
clean_trip_final$week_day <- format(as.Date(clean_trip_final$date), "%A")
clean_trip_final$month <- format(as.Date(clean_trip_final$date), "%b_%y")
clean_trip_final$year <- format(clean_trip_final$date, "%Y")
#----------------------------------------------------------------------------------#
#Add ride length column
clean_trip_final$ride_length <- difftime(clean_trip_final$ended_at, clean_trip_final$started_at, units = "mins")
# Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)
#----------------------------------------------------------------------------------#
#Select the data we are going to use
clean_trip_final <- clean_trip_final %>%
select(bike_type, member_casual, month, year, time, started_at, week_day, ride_length)
View(clean_trip_final)
View(all_trips)
View(clean_trip_final)
#----------------------------------------------------------------------------------#
#Remove stolen bikes
clean_trip_final <- clean_trip_final[!clean_trip_final$ride_length>1440,]
clean_trip_final <- clean_trip_final[!clean_trip_final$ride_length<5,]
#----------------------------------------------------------------------------------#
#Check Cleaned data
colSums(is.na(clean_trip_final))
View(filter(clean_trip_final, clean_trip_final$started_at > clean_trip_final$ended_at))
View(filter(clean_trip_final, clean_trip_final$ride_length>1440 | clean_trip_final < 5))
View(filter(clean_trip_final, clean_trip_final$ride_length>1440 | clean_trip_final_length < 5))
View(filter(clean_trip_final, clean_trip_final$ride_length>1440 | clean_trip_final_length < 5))
View(filter(clean_trip_final, clean_trip_final$started_at > clean_trip_final$ended_at))
View(filter(clean_trip_final, clean_trip_final$ride_length>1440 | clean_trip_final$ride_length < 5))
#----------------------------------------------------------------------------------#
#Save the cleaned data
write.csv(clean_trip_final,file = "clean_trip_final.csv",row.names = FALSE)
#----------------------------------------------------------------------------------#
#import the cleaned data
clean_trip_final <- read_csv("clean_trip_final.csv")
#----------------------------------------------------------------------------------#
#import the cleaned data
clean_trip_final <- read_csv("clean_trip_final.csv")
str(clean_trip_final)
names(clean_trip_final)
#----------------------------------------------------------------------------------#
clean_trip_final$week_day <- ordered(clean_trip_final$week_day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
#----------------------------------------------------------------------------------#
#Analysis:- min, max, median, average
View(describe(clean_trip_final$ride_length, fast=TRUE))
#----------------------------------------------------------------------------------#
#Total no. of customers
View(table(clean_trip_final$member_casual))
#----------------------------------------------------------------------------------#
#Total no. of customers
View(table(clean_trip_final$member_casual))
#----------------------------------------------------------------------------------#
#Total rides for each customer type in minutes
View(setNames(aggregate(ride_length ~ member_casual, clean_trip_final, sum), c("customer_type", "total_ride_len(mins)")))
knitr::opts_chunk$set(echo = TRUE)
#----------------------------------------------------------------------------------#
#import the cleaned data
clean_trip_final <- read_csv("clean_trip_final.csv")
library(tidyverse)
library(lubridate)
library(janitor)
library(data.table)
library(readr)
library(psych)
library(hrbrthemes)
library(ggplot2)
# Use the conflicted package to manage conflicts
library(conflicted)
# Set dplyr::filter and dplyr::lag as the default choices
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
#----------------------------------------------------------------------------------#
#import the cleaned data
clean_trip_final <- read_csv("clean_trip_final.csv")
#----------------------------------------------------------------------------------#
# # Upload Divvy datasets (csv files)
q1_2019 <- read_csv("Divvy_Trips_2019_Q1.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")
#----------------------------------------------------------------------------------#
#Data Validation
# Check column names across all the original files
colnames(q1_2019)
colnames(q1_2020)
# Rename columns  to make them consistent with q1_2020
(q1_2019 <- rename(q1_2019
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
# Inspect the dataframes and look for incongruencies
str(q1_2019)
str(q1_2020)
#----------------------------------------------------------------------------------#
```
-   In the next step, the data frames were **aggregated** into a **single data frame**. This involved **combining the data from each of the monthly files** into a cohesive whole, allowing for more efficient and comprehensive analysis of the data. **Aggregating the data in this way also made it easier to identify trends and patterns across the entire dataset**, rather than having to analyze the data for each quarter separately.
# Stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(q1_2019, q1_2020)
# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020
all_trips <- all_trips %>%
select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender,  "tripduration"))
# Stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(q1_2019, q1_2020)
#----------------------------------------------------------------------------------#
# Convert ride_id and rideable_type to character so that they can stack correctly
q1_2019 <-  mutate(q1_2019, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
# Stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(q1_2019, q1_2020)
# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020
all_trips <- all_trips %>%
select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender,  "tripduration"))
#----------------------------------------------------------------------------------#
```
-   After aggregating into a single data frame, the **resulting combined dataset** was **written to a new file** and **saved to the hard drive**. This allows for **easier access** to the data for further analysis and visualization, and ensures that the data is **available for future reference**. Saving the data to a file on the hard drive also ensures that it is **backed up** and **protected against accidental loss or damage**.
```{r eval=FALSE}
#----------------------------------------------------------------------------------#
# Save the combined files
write.csv(all_trips,file = "all_trips.csv",row.names = FALSE)
-   After being saved to the hard drive, the data was once again **subjected to validation** in order to **ensure its accuracy, completeness, and consistency**. This process involved reviewing the data for **errors or inconsistencies, checking for missing or incomplete records**, and verifying that the data met the requirements and expectations of the analysis.
#----------------------------------------------------------------------------------#
#Count rows with "na" values
colSums(is.na(all_trips))
#----------------------------------------------------------------------------------#
```
```{r eval=FALSE}
```{r eval=FALSE}
#----------------------------------------------------------------------------------#
#Remove missing
clean_trip_final <- all_trips[complete.cases(all_trips), ]
#----------------------------------------------------------------------------------#
```
```{r eval=FALSE}
```{r eval=FALSE}
#----------------------------------------------------------------------------------#
#Remove duplicates
clean_trip_final <- distinct(clean_trip_final)
#----------------------------------------------------------------------------------#
```
```{r eval=FALSE}
```{r eval=FALSE}
#----------------------------------------------------------------------------------#
#Remove na
clean_trip_final <- drop_na(clean_trip_final)
clean_trip_final <- remove_missing(clean_trip_final)
#----------------------------------------------------------------------------------#
```
```{r eval=FALSE}
```{r eval=FALSE}
#----------------------------------------------------------------------------------#
#Remove data with greater start_at than end_at
clean_trip_final<- clean_trip_final %>%
filter(started_at < ended_at)
#----------------------------------------------------------------------------------#
```
```{r eval=FALSE}
```{r eval=FALSE}
#----------------------------------------------------------------------------------#
# Count the unique values in the member_casual column
table(clean_trip_final$member_casual)
# Reassign to the desired values (we will go with the current 2020 labels)
clean_trip_final <- clean_trip_final %>%
mutate(member_casual = recode(member_casual
,"Subscriber" = "member"
,"Customer" = "casual"))
# Recheck the unique values in the member_casual column
table(clean_trip_final$member_casual)
#----------------------------------------------------------------------------------#
```
```{r eval=FALSE}
```{r eval=FALSE}
#----------------------------------------------------------------------------------#
#Separate date in date, day, month, year for better analysis
clean_trip_final$date <- as.Date(clean_trip_final$started_at)
clean_trip_final$week_day <- format(as.Date(clean_trip_final$date), "%A")
clean_trip_final$year <- format(clean_trip_final$date, "%Y")
clean_trip_final$month <- format(as.Date(clean_trip_final$date), "%b_%y")
#----------------------------------------------------------------------------------#
#Add ride length column
clean_trip_final$ride_length <- difftime(clean_trip_final$ended_at, clean_trip_final$started_at, units = "mins")
# Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)
#----------------------------------------------------------------------------------#
```
```{r eval=FALSE}
```{r eval=FALSE}
#----------------------------------------------------------------------------------#
#Remove stolen bikes
clean_trip_final <- clean_trip_final[!clean_trip_final$ride_length>1440,]
clean_trip_final <- clean_trip_final[!clean_trip_final$ride_length<5,]
#----------------------------------------------------------------------------------#
#Check Cleaned data
colSums(is.na(clean_trip_final))
View(filter(clean_trip_final, clean_trip_final$started_at > clean_trip_final$ended_at))
View(filter(clean_trip_final, clean_trip_final$ride_length>1440 | clean_trip_final$ride_length < 5))
#----------------------------------------------------------------------------------#
#Save the cleaned data
write.csv(clean_trip_final,file = "clean_trip_final.csv",row.names = FALSE)
#----------------------------------------------------------------------------------#
#import the cleaned data
clean_trip_final <- read_csv("clean_trip_final.csv")
str(clean_trip_final)
names(clean_trip_final)
#----------------------------------------------------------------------------------#
clean_trip_final$week_day <- ordered(clean_trip_final$week_day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
#----------------------------------------------------------------------------------#
#Analysis:- min, max, median, average
View(describe(clean_trip_final$ride_length, fast=TRUE))
#----------------------------------------------------------------------------------#
#Total no. of customers
View(table(clean_trip_final$member_casual))
#----------------------------------------------------------------------------------#
#Total rides for each customer type in minutes
View(setNames(aggregate(ride_length ~ member_casual, clean_trip_final, sum), c("customer_type", "total_ride_len(mins)")))
#----------------------------------------------------------------------------------#
#Differences between members and casual riders in terms of length of ride
View(clean_trip_final %>%
group_by(member_casual) %>%
summarise(min_length_mins = min(ride_length), max_length_min = max(ride_length),
median_length_mins = median(ride_length), mean_length_min = mean(ride_length)))
#----------------------------------------------------------------------------------#
#Average ride_length for users by day_of_week and Number of total rides by day_of_week
View(clean_trip_final %>%
group_by(week_day) %>%
summarise(Avg_length = mean(ride_length),
number_of_ride = n()))
#----------------------------------------------------------------------------------#
#Average ride_length by month
View(clean_trip_final %>%
group_by(month) %>%
summarise(Avg_length = mean(ride_length),
number_of_ride = n()))
table(clean_trip_final$month)
clean_trip_final$month <- format(as.Date(clean_trip_final$date), "%m")
#----------------------------------------------------------------------------------#
#Differences between members and casual riders in terms of length of ride
View(clean_trip_final %>%
group_by(member_casual) %>%
summarise(min_length_mins = min(ride_length), max_length_min = max(ride_length),
median_length_mins = median(ride_length), mean_length_min = mean(ride_length)))
#----------------------------------------------------------------------------------#
#Average ride_length for users by day_of_week and Number of total rides by day_of_week
View(clean_trip_final %>%
group_by(week_day) %>%
summarise(Avg_length = mean(ride_length),
number_of_ride = n()))
#----------------------------------------------------------------------------------#
#Differences between members and casual riders in terms of length of ride
View(clean_trip_final %>%
group_by(member_casual) %>%
summarise(min_length_mins = min(ride_length), max_length_min = max(ride_length),
median_length_mins = median(ride_length), mean_length_min = mean(ride_length)))
#----------------------------------------------------------------------------------#
#Average ride_length for users by day_of_week and Number of total rides by day_of_week
View(clean_trip_final %>%
group_by(week_day) %>%
summarise(Avg_length = mean(ride_length),
number_of_ride = n()))
#----------------------------------------------------------------------------------#
#Average ride_length by month
View(clean_trip_final %>%
group_by(month) %>%
summarise(Avg_length = mean(ride_length),
number_of_ride = n()))
#----------------------------------------------------------------------------------#
#Average ride length comparison by each week day according to each customer type
View(aggregate(clean_trip_final$ride_length ~ clean_trip_final$member_casual +
clean_trip_final$week_day, FUN = mean))
#----------------------------------------------------------------------------------#
#Average ride length comparison by each month according to each customer type
View(aggregate(clean_trip_final$ride_length ~ clean_trip_final$member_casual +
clean_trip_final$month, FUN = mean))
#----------------------------------------------------------------------------------#
#Average ride length comparison by each month according to each customer type
View(aggregate(clean_trip_final$ride_length ~ clean_trip_final$member_casual +
clean_trip_final$month, FUN = mean))
#----------------------------------------------------------------------------------#
#Analyze rider length data by customer type and weekday
View(clean_trip_final %>%
group_by(memner_casual, week_day) %>%
summarise(number_of_ride = n(),
avgerage_duration = mean(ride_length),
median_duration = median(ride_length),
max_duration = max(ride_length),
min_duration = min(ride_length)))
#----------------------------------------------------------------------------------#
#Analyze rider length data by customer type and weekday
View(clean_trip_final %>%
group_by(memner_casual, week_day) %>%
summarise(number_of_ride = n(),
avgerage_duration = mean(ride_length),
median_duration = median(ride_length),
max_duration = max(ride_length),
min_duration = min(ride_length)))
#----------------------------------------------------------------------------------#
```
#----------------------------------------------------------------------------------#
#Analyze rider length data by customer type and weekday
View(clean_trip_final %>%
group_by(memner_casual, week_day) %>%
summarise(number_of_ride = n(),
avgerage_duration = mean(ride_length),
median_duration = median(ride_length),
max_duration = max(ride_length),
min_duration = min(ride_length)))
#----------------------------------------------------------------------------------#
#Analyze rider length data by customer type and weekday
View(clean_trip_final %>%
group_by(member_casual, week_day) %>%
summarise(number_of_ride = n(),
avgerage_duration = mean(ride_length),
median_duration = median(ride_length),
max_duration = max(ride_length),
min_duration = min(ride_length)))
#----------------------------------------------------------------------------------#
#Analyze rider length data by customer type and month
View(clean_trip_final %>%
group_by(member_casual, month) %>%
summarise(nummber_of_ride = n(),
average_duration = mean(ride_length),
median_duration = median(ride_length),
max_duration = max(ride_length),
min_duration = min(ride_length)))
#----------------------------------------------------------------------------------#
#Analyze rider length data by customer type and month
View(clean_trip_final %>%
group_by(month, member_casual) %>%
summarise(nummber_of_ride = n(),
average_duration = mean(ride_length),
median_duration = median(ride_length),
max_duration = max(ride_length),
min_duration = min(ride_length)))
#----------------------------------------------------------------------------------#
#Analyze rider length data by customer type and month
View(clean_trip_final %>%
group_by(month, member_casual) %>%
summarise(number_of_ride = n(),
average_duration = mean(ride_length),
median_duration = median(ride_length),
max_duration = max(ride_length),
min_duration = min(ride_length)))
#----------------------------------------------------------------------------------#
#Save the data for data visualization
write.csv(clean_trip_final,file = "clean_trip_final_visualize.csv",row.names = FALSE)
#----------------------------------------------------------------------------------#
#Total number of rides per day of the week for each customer type
ggplot(clean_trip_final, aes(x = week_day, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per day of the week for each customer type",
x = "Day of the week",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
#----------------------------------------------------------------------------------#
#Total number of rides per hour of the day for each customer type
ggplot(clean_trip_final, aes(x = hour, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per hour of the day for each customer type",
x = "Hour of the day",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
conflicted::conflicts_prefer(data.table::hour)
#----------------------------------------------------------------------------------#
#Total number of rides per hour of the day for each customer type
ggplot(clean_trip_final, aes(x = hour, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per hour of the day for each customer type",
x = "Hour of the day",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
View(clean_trip_final)
View(clean_trip_final)
clean_trip_final$time <- as.POSIXct(clean_trip_final$started_at, format = "%Y-%m-%d %H:%M:%S")
clean_trip_final$time <- format(clean_trip_final$time, format = "%H:%M")
#----------------------------------------------------------------------------------#
#Total number of rides per hour of the day for each customer type
ggplot(clean_trip_final, aes(x = time, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per hour of the day for each customer type",
x = "Hour of the day",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
#----------------------------------------------------------------------------------#
#Total number of rides per hour of the day for each customer type
ggplot(clean_trip_final, aes(x = time, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per hour of the day for each customer type",
x = "Hour of the day",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal() + scale_x_labels(labels = c("00:00", "01:00", ..., "23:00"))
#----------------------------------------------------------------------------------#
#Total number of rides per hour of the day for each customer type
ggplot(clean_trip_final, aes(x = time, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per hour of the day for each customer type",
x = "Hour of the day",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal() +scale_x_datetime(labels=date_format("%Y %H:%M"))
#----------------------------------------------------------------------------------#
#Total number of rides per hour of the day for each customer type
ggplot(clean_trip_final, aes(x = time, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per hour of the day for each customer type",
x = "Hour of the day",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal() +scale_x_date(date_breaks = "1 day", date_minor_breaks = "1 hour",
date_labels = "%B")
#----------------------------------------------------------------------------------#
#Total number of rides per hour of the day for each customer type
ggplot(clean_trip_final, aes(x = time, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per hour of the day for each customer type",
x = "Hour of the day",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
#----------------------------------------------------------------------------------#
#Total number of rides per hour of the day for each customer type, x label show each hour
ggplot(clean_trip_final, aes(x = hour, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per hour of the day for each customer type",
x = "Hour of the day",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal() + scale_x_continuous(breaks = seq(0, 23, by = 1))
#----------------------------------------------------------------------------------#
#Total number of rides per hour of the day for each customer type, x label show each hour
ggplot(clean_trip_final, aes(x = time, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per hour of the day for each customer type",
x = "Hour of the day",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal() + scale_x_continuous(breaks = seq(0, 23, by = 1))
#----------------------------------------------------------------------------------#
#Total number of rides per hour of the day for each customer type, x label show each hour
ggplot(clean_trip_final, aes(x = time, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per hour of the day for each customer type",
x = "Hour of the day",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal() + scale_x_discrete(breaks = seq(0, 23, by = 1))
#----------------------------------------------------------------------------------#
#Total number of rides per month for each customer type
ggplot(clean_trip_final, aes(x = month, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per month for each customer type",
x = "Month",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
#----------------------------------------------------------------------------------#
#Total number of rides per month for each customer type
ggplot(clean_trip_final, aes(x = month, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(title = "Total number of rides per month for each customer type",
x = "Month",
y = "Number of rides") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
#----------------------------------------------------------------------------------#
#Average ride duration per day of the week for each customer type
ggplot(clean_trip_final, aes(x = week_day, y = ride_length, fill = member_casual)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Average ride duration per day of the week for each customer type",
x = "Day of the week",
y = "Average ride duration (minutes)") +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal()
